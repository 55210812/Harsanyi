import torch
from .set_utils import generate_all_masks, generate_subset_masks, generate_reverse_subset_masks, \
    generate_set_with_intersection_masks
from tqdm import tqdm

def get_reward2Iand_mat(n_dim: int, sort_type: str):
    '''
    The transformation matrix (containing 0, 1, -1's) from reward to and-interaction (Harsanyi)
    :param n_dim: the input dimension n
    :param sort_type: the type of sorting the masks
    :return a matrix, with shape 2^n * 2^n
    '''
    all_masks = torch.BoolTensor(generate_all_masks(n_dim, sort_type=sort_type))
    n_masks, _ = all_masks.shape
    mat = []
    for i in tqdm(range(n_masks), ncols=100, desc="Generating reward2Iand matrix"):
    # for i in range(n_masks):
        mask_S = all_masks[i]
        row = torch.zeros(n_masks)
        # ===============================================================================================
        # Note: I(S) = \sum_{L\subseteq S} (-1)^{s-l} v(L)
        mask_Ls, L_indices = generate_subset_masks(mask_S, all_masks)
        L_indices = (L_indices == True).nonzero(as_tuple=False)
        assert mask_Ls.shape[0] == L_indices.shape[0]
        row[L_indices] = torch.pow(-1., mask_S.sum() - mask_Ls.sum(dim=1)).unsqueeze(1)
        # ===============================================================================================
        mat.append(row.clone())
    mat = torch.stack(mat).float() # todo: 这个float可能要改一下
    return mat


def get_reward2Ior_mat(n_dim: int, sort_type: str):
    '''
    The transformation matrix (containing 0, 1, -1's) from reward to or-interaction
    :param n_dim: the input dimension n
    :param sort_type: the type of sorting the masks
    :return a matrix, with shape 2^n * 2^n
    '''
    all_masks = torch.BoolTensor(generate_all_masks(n_dim, sort_type=sort_type))
    n_masks, _ = all_masks.shape
    mat = []
    for i in tqdm(range(n_masks), ncols=100, desc="Generating reward2Ior matrix"):
    # for i in range(n_masks):
        mask_S = all_masks[i]
        row = torch.zeros(n_masks)
        # ===============================================================================================
        # Note: I(S) = -\sum_{L\subseteq S} (-1)^{s+(n-l)-n} v(N\L) if S is not empty
        if mask_S.sum() == 0:
            row[i] = 1.
        else:
            mask_NLs, NL_indices = generate_reverse_subset_masks(mask_S, all_masks)
            NL_indices = (NL_indices == True).nonzero(as_tuple=False)
            assert mask_NLs.shape[0] == NL_indices.shape[0]
            row[NL_indices] = - torch.pow(-1., mask_S.sum() + mask_NLs.sum(dim=1) + n_dim).unsqueeze(1)
        # ================================================================================================
        mat.append(row.clone())
    mat = torch.stack(mat).float()
    return mat


def get_Iand2reward_mat(n_dim: int, sort_type: str):
    all_masks = torch.BoolTensor(generate_all_masks(n_dim, sort_type=sort_type))
    n_masks, _ = all_masks.shape
    mat = []
    for i in tqdm(range(n_masks), ncols=100, desc="Generating Iand2reward matrix"):
    # for i in range(n_masks):
        mask_S = all_masks[i]
        row = torch.zeros(n_masks)
        # ================================================================================================
        # Note: v(S) = \sum_{L\subseteq S} I(S)
        mask_Ls, L_indices = generate_subset_masks(mask_S, all_masks)
        row[L_indices] = 1.
        # ================================================================================================
        mat.append(row.clone())
    mat = torch.stack(mat).float()
    return mat


def get_Ior2reward_mat(n_dim: int, sort_type: str):
    all_masks = torch.BoolTensor(generate_all_masks(n_dim, sort_type=sort_type))
    n_masks, _ = all_masks.shape
    mat = []
    mask_empty = torch.zeros(n_dim).bool()
    _, empty_indice = generate_subset_masks(mask_empty, all_masks)
    for i in tqdm(range(n_masks), ncols=100, desc="Generating Ior2reward matrix"):
    # for i in range(n_masks):
        mask_S = all_masks[i]
        row = torch.zeros(n_masks)
        # ================================================================================================
        # Note: v(S) = I(\emptyset) + \sum_{L: L\union S\neq \emptyset} I(S)
        row[empty_indice] = 1.
        mask_Ls, L_indices = generate_set_with_intersection_masks(mask_S, all_masks)
        row[L_indices] = 1.
        # ================================================================================================
        mat.append(row.clone())
    mat = torch.stack(mat).float()
    return mat

