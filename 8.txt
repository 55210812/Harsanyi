{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from pathlib import Path\n",
    "\n",
    "# 修正后的基础路径（处理特殊字符）\n",
    "base_path = Path('/data/hqdeng7/CSCIENCE/interaction_nlp_harsanyi/results/20250303_examine_pq_optimization_0.025/result')\n",
    "dataset_path = base_path / 'dataset=custom-imdb-for-bertweet-nips2024-ucb-test_model=BERTweet#pretrain_seed=0/players=players-manual_lbl=correct_baseline=unk_bg=ori#/data/'\n",
    "\n",
    "def parse_inference(file_path):\n",
    "    \"\"\"更健壮的预测分数解析函数\"\"\"\n",
    "    try:\n",
    "        with open(file_path) as f:\n",
    "            content = f.read()\n",
    "            # 使用正则表达式匹配pred_scores\n",
    "            import re\n",
    "            match = re.search(r'pred_scores:\\s*\\[([-\\d\\.,\\s]+)\\]', content)\n",
    "            if match:\n",
    "                scores = list(map(float, match.group(1).split(',')))\n",
    "                max_score = max(scores, key=abs)\n",
    "                return max_score\n",
    "    except Exception as e:\n",
    "        print(f'Error parsing {file_path}: {str(e)}')\n",
    "    return 0.0\n",
    "\n",
    "data = []\n",
    "for sample_id in range(11):\n",
    "    sample_dir = dataset_path / f'sample{sample_id}'\n",
    "    try:\n",
    "        # 添加路径存在性检查\n",
    "        if not sample_dir.exists():\n",
    "            print(f'{sample_dir} not found')\n",
    "            continue\n",
    "            \n",
    "        # 加载交互分数\n",
    "        and_scores = np.load(sample_dir/'I_and.npy')\n",
    "        # 检查and_scores是否为交互矩阵\n",
    "        if and_scores.ndim != 2 or and_scores.shape[0] != and_scores.shape[1]:\n",
    "            raise ValueError('and_scores should be a square interaction matrix')\n",
    "        # 计算一元和二元交互之和\n",
    "        unary_sum = np.diag(and_scores).sum()\n",
    "        pairwise_sum = np.triu(and_scores, k=1).sum()\n",
    "        interaction_sum = unary_sum + pairwise_sum\n",
    "        \n",
    "        # 获取模型输出\n",
    "        f_x = parse_inference(sample_dir/'inference.txt')\n",
    "        \n",
    "        data.append({\n",
    "            'Sample': f'sample{sample_id}',\n",
    "            '一元二元交互和': interaction_sum,\n",
    "            '模型输出max|f(x)|': f_x\n",
    "        })\n",
    "    except Exception as e:\n",
    "        print(f'处理样本{sample_id}时出错: {str(e)}')\n",
    "\n",
    "# 创建带格式的表格\n",
    "df = pd.DataFrame(data).set_index('Sample')\n",
    "styled_df = df.style\\\n",
    "    .format({'一元二元交互和': '{:.4f}', '模型输出max|f(x)|': '{:.4f}'})\\\n",
    "    .set_caption('样本交互分析表')\\\n",
    "    .set_properties(**{'text-align': 'center'})\n",
    "\n",
    "styled_df"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
